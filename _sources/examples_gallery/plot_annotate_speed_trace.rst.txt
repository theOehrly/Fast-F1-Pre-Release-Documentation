
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_gallery\plot_annotate_speed_trace.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_plot_annotate_speed_trace.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_plot_annotate_speed_trace.py:

Plot speed traces with corner annotations
============================================

Plot the speed over the course of a lap and add annotations to mark corners.

.. GENERATED FROM PYTHON SOURCE LINES 6-21

.. code-block:: Python



    import matplotlib.pyplot as plt

    import fastf1.plotting


    # enable some matplotlib patches for plotting timedelta values and load
    # FastF1's default color scheme
    fastf1.plotting.setup_mpl(misc_mpl_mods=False)

    # load a session and its telemetry data
    session = fastf1.get_session(2021, 'Spanish Grand Prix', 'Q')
    session.load()








.. GENERATED FROM PYTHON SOURCE LINES 22-24

First, we select the fastest lap and get the car telemetry data for this
lap.

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: Python


    fastest_lap = session.laps.pick_fastest()
    car_data = fastest_lap.get_car_data().add_distance()








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Next, load the circuit info that includes the information about the location
of the corners.

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: Python


    circuit_info = session.get_circuit_info()








.. GENERATED FROM PYTHON SOURCE LINES 35-37

Finally, we create a plot and plot the speed trace as well as the corner
markers.

.. GENERATED FROM PYTHON SOURCE LINES 37-68

.. code-block:: Python


    team_color = fastf1.plotting.team_color(fastest_lap['Team'])

    fig, ax = plt.subplots()
    ax.plot(car_data['Distance'], car_data['Speed'],
            color=team_color, label=fastest_lap['Driver'])

    # Draw vertical dotted lines at each corner that range from slightly below the
    # minimum speed to slightly above the maximum speed.
    v_min = car_data['Speed'].min()
    v_max = car_data['Speed'].max()
    ax.vlines(x=circuit_info.corners['Distance'], ymin=v_min-20, ymax=v_max+20,
              linestyles='dotted', colors='grey')

    # Plot the corner number just below each vertical line.
    # For corners that are very close together, the text may overlap. A more
    # complicated approach would be necessary to reliably prevent this.
    for _, corner in circuit_info.corners.iterrows():
        txt = f"{corner['Number']}{corner['Letter']}"
        ax.text(corner['Distance'], v_min-30, txt,
                va='center_baseline', ha='center', size='small')

    ax.set_xlabel('Distance in m')
    ax.set_ylabel('Speed in km/h')
    ax.legend()

    # Manually adjust the y-axis limits to include the corner numbers, because
    # Matplotlib does not automatically account for text that was manually added.
    ax.set_ylim([v_min - 40, v_max + 20])

    plt.show()



.. image-sg:: /examples_gallery/images/sphx_glr_plot_annotate_speed_trace_001.png
   :alt: plot annotate speed trace
   :srcset: /examples_gallery/images/sphx_glr_plot_annotate_speed_trace_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.411 seconds)


.. _sphx_glr_download_examples_gallery_plot_annotate_speed_trace.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_annotate_speed_trace.ipynb <plot_annotate_speed_trace.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_annotate_speed_trace.py <plot_annotate_speed_trace.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
