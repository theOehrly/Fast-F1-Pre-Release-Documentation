
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_gallery\plot_gear_shifts_on_track.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_plot_gear_shifts_on_track.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_plot_gear_shifts_on_track.py:

Gear shifts on track
=======================

Plot which gear is being used at which point of the track

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Import FastF1 and load the data

.. GENERATED FROM PYTHON SOURCE LINES 8-25

.. code-block:: default


    import fastf1

    import matplotlib.pyplot as plt
    from matplotlib.collections import LineCollection
    from matplotlib import cm
    import numpy as np


    fastf1.Cache.enable_cache('../doc_cache')  # replace with your cache directory

    session = fastf1.get_session(2021, 'Austrian Grand Prix', 'Q')
    session.load()

    lap = session.laps.pick_fastest()
    tel = lap.get_telemetry()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:519: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      merged.loc[:, col] = merged.loc[:, col].astype(dtype_map[col])
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:600: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      ret.loc[:, ch] = ret.loc[:, ch].ffill().ffill().bfill()
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:519: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      merged.loc[:, col] = merged.loc[:, col].astype(dtype_map[col])
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:600: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      ret.loc[:, ch] = ret.loc[:, ch].ffill().ffill().bfill()
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:519: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      merged.loc[:, col] = merged.loc[:, col].astype(dtype_map[col])
    C:\Dateien\Code\Formula1\Fast-F1\fastf1\core.py:388: FutureWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`
      data_slice.loc[:, 'Time'] = data_slice['SessionTime'] - start_time




.. GENERATED FROM PYTHON SOURCE LINES 27-29

Prepare the data for plotting by converting it to the appropriate numpy
data types

.. GENERATED FROM PYTHON SOURCE LINES 29-37

.. code-block:: default


    x = np.array(tel['X'].values)
    y = np.array(tel['Y'].values)

    points = np.array([x, y]).T.reshape(-1, 1, 2)
    segments = np.concatenate([points[:-1], points[1:]], axis=1)
    gear = tel['nGear'].to_numpy().astype(float)








.. GENERATED FROM PYTHON SOURCE LINES 39-41

Create a line collection. Set a segmented colormap and normalize the plot
to full integer values of the colormap

.. GENERATED FROM PYTHON SOURCE LINES 41-47

.. code-block:: default


    cmap = cm.get_cmap('Paired')
    lc_comp = LineCollection(segments, norm=plt.Normalize(1, cmap.N+1), cmap=cmap)
    lc_comp.set_array(gear)
    lc_comp.set_linewidth(4)








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Create the plot

.. GENERATED FROM PYTHON SOURCE LINES 50-61

.. code-block:: default


    plt.gca().add_collection(lc_comp)
    plt.axis('equal')
    plt.tick_params(labelleft=False, left=False, labelbottom=False, bottom=False)

    title = plt.suptitle(
        f"Fastest Lap Gear Shift Visualization\n"
        f"{lap['Driver']} - {session.event['EventName']} {session.event.year}"
    )









.. GENERATED FROM PYTHON SOURCE LINES 63-65

Add a colorbar to the plot. Shift the colorbar ticks by +0.5 so that they
are centered for each color segment.

.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: default


    cbar = plt.colorbar(mappable=lc_comp, label="Gear", boundaries=np.arange(1, 10))
    cbar.set_ticks(np.arange(1.5, 9.5))
    cbar.set_ticklabels(np.arange(1, 9))


    plt.show()



.. image-sg:: /examples_gallery/images/sphx_glr_plot_gear_shifts_on_track_001.png
   :alt: Fastest Lap Gear Shift Visualization VER - Austrian Grand Prix 2021
   :srcset: /examples_gallery/images/sphx_glr_plot_gear_shifts_on_track_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.134 seconds)


.. _sphx_glr_download_examples_gallery_plot_gear_shifts_on_track.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gear_shifts_on_track.py <plot_gear_shifts_on_track.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gear_shifts_on_track.ipynb <plot_gear_shifts_on_track.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
